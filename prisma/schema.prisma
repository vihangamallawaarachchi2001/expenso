// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User accounts and sessions (NextAuth integration)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[] // One-to-many relation to Expense
  categories    Category[] // One-to-many relation to Category
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Expense Tracker Models
model Expense {
  id          Int       @id @default(autoincrement())
  description String    @db.Text
  amount      Float
  date        DateTime  @default(now())
  userId      String
  categoryId  Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([date])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  color    String    // Optional: for UI representation
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[] // One-to-many relation to Expense

  @@unique([name, userId]) // Ensure unique category names per user
}
